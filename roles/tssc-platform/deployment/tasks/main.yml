---
- name: Add redhatgov catalog source
  k8s:
    definition: '{{ lookup("template", "catalog-source.yml.j2")|from_yaml }}'

- name: Get providers from TsscPlatform
  set_fact:
    platform_ci_tool: "{{ tssc_platform.providers.ci_tool  | default('jenkins') }}"
    platform_container_registry: "{{ tssc_platform.providers.container_registry  | default('nexus') }}"

- name: Add Quay to operator list if using it as container registry
  set_fact:
    operator_list: '{{ operator_list + ["quay"] }}'
  when: platform_container_registry == 'quay'

- name: Get a list of operator groups
  k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    namespace: '{{ tssc_namespace }}'
  register: operator_groups

- set_fact:
    operator_group_name: '{{ operator_groups.resources[0].metadata.name }}'
  when: operator_groups.resources

- name: Ensure OperatorGroup exists
  k8s:
    definition: '{{ lookup("template", "operator-group.yml.j2") }}'

- name: 'Create Subscription for {{ operator_app }}'
  k8s:
    definition: '{{ lookup("template", "subscriptions/" + operator_app + ".yml.j2") }}'
  loop: '{{ operator_list }}'
  loop_control:
    loop_var: operator_app
    label: operator_app

- include_tasks: deploy_jenkins.yml
  when: platform_ci_tool == 'jenkins'

- name: Create Subscription for OpenShift Pipelines
  k8s:
    definition: '{{ lookup("template", "subscriptions/tekton.yml.j2") }}'
  when: platform_ci_tool == 'tekton'

- name: Fetch tssc-service-account secret
  set_fact:
    secret_data: "{{ lookup('k8s', kind='Secret', namespace=tssc_namespace, resource_name=tssc_service_account_secret) }}"

- name: Set tssc-service-account credential facts from secret
  set_fact:
    tssc_service_account:
      username: "{{ secret_data.data.username | b64decode }}"
      password: "{{ secret_data.data.password | b64decode }}"
      email: "{{ secret_data.data.email | b64decode }}"
      first_name: "{{ secret_data.data.first_name | b64decode }}"
      last_name: "{{ secret_data.data.last_name | b64decode }}"
  when:
    - secret_data != []

- name: Create secret if missing
  block:
    - name: generate tssc-service-account credential facts
      set_fact:
        tssc_service_account:
          username: tssc
          password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"
          email: tssc-service-account@redhat.com
          first_name: Tssc
          last_name: ServiceAccount
    - name: create secret
      k8s:
        namespace: '{{ tssc_namespace }}'
        definition: "{{ lookup('template', 'tssc-service-account-secret.yml.j2') }}"
  when:
    - secret_data == []

- name: 'Set CustomResource for {{ operator_app }} to {{ cr_state }}'
  k8s:
    definition: '{{ lookup("template", "custom-resources/" + operator_app + ".yml.j2") }}'
    state: '{{ cr_state }}'
  register: deployment
  until: not deployment.failed
  retries: 5
  delay: 10
  loop: '{{ operator_list }}'
  loop_control:
    loop_var: operator_app
    label: operator_app

- name: Generate GPG Key
  import_tasks: generate_gpg_key.yml
  when: cr_state == 'present'

- name: Get registry pull secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ tssc_platform.pull_secret.name | default('pull-secret') }}"
    namespace: "{{ tssc_platform.pull_secret.namespace | default('openshift-config') }}"
  register: pull_secret

- set_fact:
    reg_rhio_pull_token: "{{ pull_secret.resources[0].data['.dockerconfigjson'] | b64decode | from_json }}"

- set_fact:
    rhio_auth: "{{ reg_rhio_pull_token.auths['registry.redhat.io'].auth | b64decode }}"

- set_fact:
    rhio_username: "{{ rhio_auth.split(':')[0] }}"
    rhio_token: "{{ rhio_auth.split(':')[1] }}"

- name: 'Set ploigos-platform-config ConfigMap to {{ cr_state }}'
  k8s:
    definition: '{{ lookup("template", "ploigos-platform-config.yml.j2") }}'
    state: '{{ cr_state }}'

- name: Get secret template as base64
  set_fact:
    ploigos_platform_config_secrets: "{{ lookup('template', 'ploigos-platform-config-secrets.yml.j2') | b64encode }}"

- name: 'Set ploigos-platform-config-secrets Secret to {{ cr_state }}'
  k8s:
    state: '{{ cr_state }}'
    definition: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: ploigos-platform-config-secrets
        namespace: '{{ tssc_namespace }}'
      data:
        config-secrets.yml: '{{ ploigos_platform_config_secrets }}'

- name: 'Apply configuration for {{ operator_app }}'
  include_role:
    name: 'tssc-platform/configuration/{{ operator_app }}'
  loop: '{{ operator_list }}'
  loop_control:
    loop_var: operator_app
    label: operator_app
  when: cr_state == 'present'

- name: Apply configuration for jenkins
  include_role:
    name: tssc-platform/configuration/legacy_jenkins
  when: cr_state == 'present' and platform_ci_tool == 'jenkins'

- name: Deploy Helm Chart for Tekton Cluster Resources
  block:
    - name: Add ploigos chart repo
      community.kubernetes.helm_repository:
        name: ploigos_charts
        repo_url: "https://ploigos.github.io/ploigos-charts"

    - name: Deploy cluster resources chart
      community.kubernetes.helm:
        name: ploigos-workflow-tekton-cluster-resources
        chart_ref: ploigos_charts/ploigos-workflow-tekton-cluster-resources
        values: "{{ lookup('template', 'ploigos-cluster-chart-values.yaml.j2') | from_yaml }}"
        release_namespace: "{{ tssc_namespace }}"
        release_state: "{{ cr_state }}"
      register: cluster_resources_chart
      ignore_errors: true
  when: platform_ci_tool == 'tekton'
